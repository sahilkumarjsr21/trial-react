[{"D:\\trial-react\\src\\index.js":"1","D:\\trial-react\\src\\reportWebVitals.js":"2","D:\\trial-react\\src\\App.js":"3","D:\\trial-react\\src\\redux\\store\\configureStore.js":"4","D:\\trial-react\\src\\redux\\sagas\\signUpSaga.js":"5","D:\\trial-react\\src\\redux\\sagas\\loginSaga.js":"6","D:\\trial-react\\src\\redux\\sagas\\storeQuestionSaga.js":"7","D:\\trial-react\\src\\redux\\reducer\\rootReducers.js":"8","D:\\trial-react\\src\\redux\\sagas\\fetchQuestionDetailsSaga.js":"9","D:\\trial-react\\src\\redux\\sagas\\updateQuestionDetailSaga.js":"10","D:\\trial-react\\src\\redux\\sagas\\deleteQuestionDetailsSaga.js":"11","D:\\trial-react\\src\\components\\dashboardComponent.jsx":"12","D:\\trial-react\\src\\components\\history.js":"13","D:\\trial-react\\src\\redux\\reducer\\fetchQuestionDetailsReducer.js":"14","D:\\trial-react\\src\\redux\\reducer\\createQuestionReducer.js":"15","D:\\trial-react\\src\\redux\\reducer\\storeQuestionReducer.js":"16","D:\\trial-react\\src\\redux\\reducer\\updateQuestionReducer.js":"17","D:\\trial-react\\src\\redux\\reducer\\deleteQuestionReducer.js":"18","D:\\trial-react\\src\\redux\\actions\\ActionTypes.js":"19","D:\\trial-react\\src\\redux\\actions\\UserActionSignUp.js":"20","D:\\trial-react\\src\\redux\\actions\\saveQuestionAction.js":"21","D:\\trial-react\\src\\redux\\actions\\deleteQuestionAction.js":"22","D:\\trial-react\\src\\api\\signupapi.js":"23","D:\\trial-react\\src\\api\\loginapi.js":"24","D:\\trial-react\\src\\redux\\actions\\UserActionLogin.js":"25","D:\\trial-react\\src\\api\\addQuestionDetailsApi.js":"26","D:\\trial-react\\src\\api\\updateQuestionDetailsApi.js":"27","D:\\trial-react\\src\\api\\deleteQuestionApi.js":"28","D:\\trial-react\\src\\redux\\actions\\fetchQuestionDetailsAction.js":"29","D:\\trial-react\\src\\redux\\actions\\updateQuestionAction.js":"30","D:\\trial-react\\src\\api\\fetchQuestionDetailsApi.js":"31","D:\\trial-react\\src\\components\\createQuestionComponent.jsx":"32","D:\\trial-react\\src\\components\\displayQuestionComponent.jsx":"33"},{"size":648,"mtime":1608072823979,"results":"34","hashOfConfig":"35"},{"size":375,"mtime":1608072824006,"results":"36","hashOfConfig":"35"},{"size":208,"mtime":1608072823959,"results":"37","hashOfConfig":"35"},{"size":1528,"mtime":1608072824004,"results":"38","hashOfConfig":"35"},{"size":796,"mtime":1608072824001,"results":"39","hashOfConfig":"35"},{"size":802,"mtime":1608072824000,"results":"40","hashOfConfig":"35"},{"size":746,"mtime":1608072824002,"results":"41","hashOfConfig":"35"},{"size":572,"mtime":1608072823994,"results":"42","hashOfConfig":"35"},{"size":664,"mtime":1608072823999,"results":"43","hashOfConfig":"35"},{"size":772,"mtime":1608072824003,"results":"44","hashOfConfig":"35"},{"size":788,"mtime":1608072823998,"results":"45","hashOfConfig":"35"},{"size":2610,"mtime":1608074383323,"results":"46","hashOfConfig":"35"},{"size":86,"mtime":1608072823973,"results":"47","hashOfConfig":"35"},{"size":589,"mtime":1608072823993,"results":"48","hashOfConfig":"35"},{"size":470,"mtime":1608072823991,"results":"49","hashOfConfig":"35"},{"size":622,"mtime":1608072823995,"results":"50","hashOfConfig":"35"},{"size":630,"mtime":1608072823997,"results":"51","hashOfConfig":"35"},{"size":588,"mtime":1608072823992,"results":"52","hashOfConfig":"35"},{"size":1744,"mtime":1608072823981,"results":"53","hashOfConfig":"35"},{"size":398,"mtime":1608072823983,"results":"54","hashOfConfig":"35"},{"size":415,"mtime":1608072823988,"results":"55","hashOfConfig":"35"},{"size":510,"mtime":1608072823986,"results":"56","hashOfConfig":"35"},{"size":402,"mtime":1608072823966,"results":"57","hashOfConfig":"35"},{"size":322,"mtime":1608072823965,"results":"58","hashOfConfig":"35"},{"size":484,"mtime":1608072823982,"results":"59","hashOfConfig":"35"},{"size":355,"mtime":1608072823961,"results":"60","hashOfConfig":"35"},{"size":381,"mtime":1608072823967,"results":"61","hashOfConfig":"35"},{"size":450,"mtime":1608072823963,"results":"62","hashOfConfig":"35"},{"size":463,"mtime":1608072823987,"results":"63","hashOfConfig":"35"},{"size":434,"mtime":1608072823989,"results":"64","hashOfConfig":"35"},{"size":386,"mtime":1608073806167,"results":"65","hashOfConfig":"35"},{"size":24167,"mtime":1608074638012,"results":"66","hashOfConfig":"35"},{"size":7741,"mtime":1608072823972,"results":"67","hashOfConfig":"35"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},"rnplob",{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"70"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"70"},"D:\\trial-react\\src\\index.js",[],["138","139"],"D:\\trial-react\\src\\reportWebVitals.js",[],"D:\\trial-react\\src\\App.js",[],"D:\\trial-react\\src\\redux\\store\\configureStore.js",[],"D:\\trial-react\\src\\redux\\sagas\\signUpSaga.js",[],"D:\\trial-react\\src\\redux\\sagas\\loginSaga.js",[],"D:\\trial-react\\src\\redux\\sagas\\storeQuestionSaga.js",[],"D:\\trial-react\\src\\redux\\reducer\\rootReducers.js",[],"D:\\trial-react\\src\\redux\\sagas\\fetchQuestionDetailsSaga.js",[],"D:\\trial-react\\src\\redux\\sagas\\updateQuestionDetailSaga.js",[],"D:\\trial-react\\src\\redux\\sagas\\deleteQuestionDetailsSaga.js",[],"D:\\trial-react\\src\\components\\dashboardComponent.jsx",["140"],"import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Appbar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport { Button, SvgIcon, colors } from \"@material-ui/core\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n// import AppDrawer from \"./appdrawer\";\r\nimport * as ActionTypes from '../redux/actions/ActionTypes'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport CreateQuestion from \"./createQuestionComponent\";\r\nimport DisplayQuestion from \"./displayQuestionComponent\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        display: \"flex\",\r\n    },\r\n    title: {\r\n        flexGrow: 1,\r\n    },\r\n    logo: {\r\n        marginRight: theme.spacing(3),\r\n    },\r\n    appbar: {\r\n        zIndex: theme.zIndex.drawer + 1,\r\n        backgroundColor: \"#0277bd\",\r\n    },\r\n    toolbar: theme.mixins.toolbar,\r\n    buttons: {\r\n        marginRight: theme.spacing(2),\r\n    },\r\n    content: {\r\n        flexGrow: 1,\r\n        backgroundColor: theme.palette.background.default,\r\n        marginTop: theme.spacing(9),\r\n    },\r\n}));\r\n\r\nexport default function AppbarComponent() {\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n    const selector = useSelector(state => state.createQuestionReducer.value);\r\n    const createQuestionHandler = () => {\r\n        dispatch({ type: ActionTypes.SET_CREATE_QUESTION_TRUE, payload: true })\r\n    };\r\n    return (\r\n        <React.Fragment>\r\n            <div className={classes.root}>\r\n                <Appbar position=\"fixed\" className={classes.appbar}>\r\n                    <Toolbar>\r\n                        <Typography variant=\"h6\" className={classes.title}>\r\n                            DashBoard\r\n            </Typography>\r\n                        <Button\r\n                            className={classes.buttons}\r\n                            variant=\"outlined\"\r\n                            style={{ background: colors.blue[100] }}\r\n                            onClick={createQuestionHandler}\r\n                        >\r\n                            Create Question\r\n            </Button>\r\n                    </Toolbar>\r\n                </Appbar>\r\n                {/* <AppDrawer className = {classes.toolbar} /> */}\r\n                <main className={classes.content}>\r\n                    <div className={classes.toolbar}>\r\n                        {selector ? <CreateQuestion questionDetails={null} /> : <DisplayQuestion ></DisplayQuestion>}\r\n                    </div>\r\n                </main>\r\n            </div>\r\n        </React.Fragment>\r\n    );\r\n}\r\n","D:\\trial-react\\src\\components\\history.js",[],"D:\\trial-react\\src\\redux\\reducer\\fetchQuestionDetailsReducer.js",[],"D:\\trial-react\\src\\redux\\reducer\\createQuestionReducer.js",[],"D:\\trial-react\\src\\redux\\reducer\\storeQuestionReducer.js",[],"D:\\trial-react\\src\\redux\\reducer\\updateQuestionReducer.js",[],"D:\\trial-react\\src\\redux\\reducer\\deleteQuestionReducer.js",[],"D:\\trial-react\\src\\redux\\actions\\ActionTypes.js",[],"D:\\trial-react\\src\\redux\\actions\\UserActionSignUp.js",[],"D:\\trial-react\\src\\redux\\actions\\saveQuestionAction.js",[],"D:\\trial-react\\src\\redux\\actions\\deleteQuestionAction.js",[],"D:\\trial-react\\src\\api\\signupapi.js",[],"D:\\trial-react\\src\\api\\loginapi.js",[],"D:\\trial-react\\src\\redux\\actions\\UserActionLogin.js",[],"D:\\trial-react\\src\\api\\addQuestionDetailsApi.js",[],"D:\\trial-react\\src\\api\\updateQuestionDetailsApi.js",[],"D:\\trial-react\\src\\api\\deleteQuestionApi.js",[],"D:\\trial-react\\src\\redux\\actions\\fetchQuestionDetailsAction.js",[],"D:\\trial-react\\src\\redux\\actions\\updateQuestionAction.js",[],"D:\\trial-react\\src\\api\\fetchQuestionDetailsApi.js",[],"D:\\trial-react\\src\\components\\createQuestionComponent.jsx",["141"],"import React from \"react\";\r\nimport * as ActionTypes from '../redux/actions/ActionTypes'\r\nimport {\r\n    makeStyles,\r\n    CssBaseline,\r\n    Container,\r\n    Typography,\r\n    TextField,\r\n    Select,\r\n    InputLabel,\r\n    Grid,\r\n    FormControl,\r\n    Button,\r\n    Box,\r\n} from \"@material-ui/core\";\r\nimport { useState } from \"react\";\r\nimport { useDispatch } from 'react-redux'\r\nimport DisplayQuestion from \"./displayQuestionComponent\";\r\nconst useStyles = makeStyles((theme) => ({\r\n    form: {\r\n        width: \"100%\",\r\n        marginTop: theme.spacing(2),\r\n    },\r\n    gender: {\r\n        width: \"100%\",\r\n    },\r\n    grid: {\r\n        marginBottom: theme.spacing(1),\r\n    },\r\n    header: {\r\n        display: \"flex\",\r\n        marginTop: theme.spacing(10)\r\n    },\r\n    title: {\r\n        flexGrow: 1,\r\n    },\r\n    button: {\r\n        marginRight: theme.spacing(2),\r\n    },\r\n}));\r\n\r\nexport default function CreateQuestion(props) {\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n    const emptyErrorMessage = `Can't be empty`;\r\n    const phoneNumberRegexp = RegExp(\r\n        /^\\s*(?:\\+?(\\d{1,3}))?[-. (]*(\\d{3})[-. )]*(\\d{3})[-. ]*(\\d{4})(?: *x(\\d+))?\\s*$/\r\n    )\r\n    \r\n    const [onSaveButtonClicked, setSaveButtonClicked] = useState(false);\r\n    const [cancelButtonClicked, setCancelButtonClicked] = useState(false);\r\n    var questionFormData = {\r\n        questionDescription: \"\",\r\n        difficulty: \"\",\r\n        questionScore: \"\",\r\n        choices: [],\r\n    };\r\n    if (props.questionDetails !== null) {\r\n        questionFormData = props.questionDetails;\r\n    }\r\n\r\n    const [formData, setFormData] = useState(\r\n        props.questionDetails !== null ? props.questionDetails : questionFormData\r\n    );\r\n    const [formErrors, setFormErrors] = useState({\r\n        questionDescriptionError: false,\r\n        questionDifficultyError: false,\r\n        questionScoreError: false,\r\n        questionOptionsError: false,\r\n        questionDescriptionMessage: \"\",\r\n        questionDifficultyMessage: \"\",\r\n        questionScoreMessage: \"\",\r\n        \r\n    });\r\n    const difficultyList = [\"\", `HARD`, `EASY`, `MEDIUM`];\r\n    const isCorrectList = [\"\", \"true\", \"false\"]\r\n    \r\n    const [disableEdit, setDisableEdit] = useState(true);\r\n    React.useEffect(() => {\r\n        return () => {\r\n            setCancelButtonClicked(false)\r\n        }\r\n    }, [cancelButtonClicked])\r\n   \r\n\r\n    const setPatientNameErrorType = (message) => {\r\n        setFormErrors((prevState) => ({\r\n            ...prevState,\r\n            patientNameError: true,\r\n            patientNameMessage: message,\r\n        }));\r\n    };\r\n    const setPatientPhoneErrorType = (message) => {\r\n        setFormErrors((prevState) => ({\r\n            ...prevState,\r\n            phoneNumberError: true,\r\n            phoneNumberMessage: message,\r\n        }));\r\n    };\r\n    const setPatientGenderErrorType = (message) => {\r\n        setFormErrors((prevState) => ({\r\n            ...prevState,\r\n            phoneNumberError: true,\r\n            phoneNumberMessage: message,\r\n        }));\r\n    };\r\n    \r\n    \r\n    const handleOnChange = (e) => {\r\n        e.preventDefault();\r\n        setDisableEdit(false);\r\n        const { name, value } = e.target;\r\n        switch (name) {\r\n            case \"patientname\":\r\n                setFormData({ ...formData, patientName: value });\r\n                if (value === \"\") {\r\n                    setPatientNameErrorType(emptyErrorMessage);\r\n                } else if (value.length < 3) {\r\n                    setPatientNameErrorType(\"Must be atleast of length 3\");\r\n                } else {\r\n                    setFormErrors({\r\n                        ...formErrors,\r\n                        patientNameError: false,\r\n                        patientNameMessage: \"\",\r\n                    });\r\n                }\r\n                break;\r\n            case \"gender\":\r\n                setFormData({ ...formData, gender: value });\r\n                if (value === \"\") {\r\n                    setPatientGenderErrorType(\"Must be one of the option\");\r\n                }\r\n                break;\r\n            case \"phonenumber\":\r\n                setFormData({ ...formData, phoneNumber: value });\r\n                if (value === \"\") {\r\n                    setPatientPhoneErrorType(emptyErrorMessage);\r\n                } else {\r\n                    setFormErrors({\r\n                        ...formErrors,\r\n                        phoneNumberError: false,\r\n                        phoneNumberMessage: \"\",\r\n                    });\r\n                }\r\n                break;\r\n            case \"patientaddress\":\r\n                setFormData({ ...formData, patientAddress: value });\r\n                if (value === \"\") {\r\n                    setFormErrors({\r\n                        ...formErrors,\r\n                        patientAddressError: true,\r\n                        patientAddressMessage: emptyErrorMessage,\r\n                    });\r\n                } else {\r\n                    setFormErrors({\r\n                        ...formErrors,\r\n                        patientAddressError: false,\r\n                        patientAddressMessage: \"\",\r\n                    });\r\n                }\r\n                break;\r\n            case \"choice1description\":\r\n                setFormData({...formData, })\r\n                break;\r\n            \r\n            default:\r\n                break;\r\n        }\r\n    };\r\n\r\n    const formValid = (formData, formErrors) => {\r\n        let valid = true;\r\n        if (formData.patientName === \"\") {\r\n            setPatientNameErrorType(emptyErrorMessage);\r\n            valid = false;\r\n        }\r\n        if (formData.phoneNumber === \"\") {\r\n            setPatientPhoneErrorType(emptyErrorMessage);\r\n            valid = false;\r\n        }\r\n        if (formData.heartRate === \"\") {\r\n            setFormErrors((prevState) => ({\r\n                ...prevState,\r\n                heartRateError: true,\r\n                heartRateMessage: emptyErrorMessage,\r\n            }));\r\n            valid = false;\r\n        }\r\n        if (formData.patientAddress === \"\") {\r\n            setFormErrors((prevState) => ({\r\n                ...prevState,\r\n                patientAddressError: true,\r\n                patientAddressMessage: emptyErrorMessage,\r\n            }));\r\n            valid = false;\r\n        }\r\n        if (formData.accommodation === \"\" || formData.accommodation === null) {\r\n            setFormErrors((prevState) => ({\r\n                ...prevState,\r\n                accommodationError: true,\r\n                accommodationMessage: emptyErrorMessage,\r\n            }));\r\n            valid = false;\r\n        }\r\n        else {\r\n            setFormErrors((prevState) => ({\r\n                ...prevState,\r\n                accommodationError: false,\r\n                accommodationMessage: '',\r\n            }));\r\n            valid = true\r\n        }\r\n        if (formData.allergies === \"\") {\r\n            setFormErrors((prevState) => ({\r\n                ...prevState,\r\n                allergiesError: true,\r\n                allergiesMessage: emptyErrorMessage,\r\n            }));\r\n            valid = false;\r\n        }\r\n        if (formData.temperature === \"\") {\r\n            setFormErrors((prevState) => ({\r\n                ...prevState,\r\n                temperatureError: true,\r\n                temperatureMessage: emptyErrorMessage,\r\n            }));\r\n            valid = false;\r\n        }\r\n        if (formData.heartRate === \"\") {\r\n            setFormErrors((prevState) => ({\r\n                ...prevState,\r\n                heartRateError: true,\r\n                heartRateMessage: emptyErrorMessage,\r\n            }));\r\n            valid = false;\r\n        }\r\n        if (formData.bloodPressure === \"\") {\r\n            setFormErrors((prevState) => ({\r\n                ...prevState,\r\n                bloodPressureError: true,\r\n                bloodPressureMessage: emptyErrorMessage,\r\n            }));\r\n        }\r\n        if (formData.physicianName === \"\") {\r\n            setFormErrors((prevState) => ({\r\n                ...prevState,\r\n                physicianNameError: true,\r\n                physicianNameMessage: emptyErrorMessage,\r\n            }));\r\n        }\r\n        if (formData.physicianType === \"\" || formData.physicianType === null) {\r\n            setFormErrors((prevState) => ({\r\n                ...prevState,\r\n                physicianTypeError: true,\r\n                physicianTypeMessage: emptyErrorMessage,\r\n            }));\r\n            valid = false;\r\n        }\r\n        else {\r\n            setFormErrors((prevState) => ({\r\n                ...prevState,\r\n                physicianTypeError: false,\r\n                physicianTypeMessage: ``,\r\n            }));\r\n            valid = true\r\n        }\r\n        if (formData.physicianPhone === \"\") {\r\n            setFormErrors((prevState) => ({\r\n                ...prevState,\r\n                physicianPhoneError: true,\r\n                physicianPhoneMessage: emptyErrorMessage,\r\n            }));\r\n        }\r\n        if (formData.hospitalVisited === \"\" || formData.hospitalVisited === null) {\r\n            setFormErrors((prevState) => ({\r\n                ...prevState,\r\n                hospitalVisitedError: true,\r\n                hospitalVisitedMessage: emptyErrorMessage,\r\n            }));\r\n            valid = false;\r\n        }\r\n        else {\r\n            setFormErrors((prevState) => ({\r\n                ...prevState,\r\n                hospitalVisitedError: false,\r\n                hospitalVisitedMessage: '',\r\n            }));\r\n        }\r\n        if (formData.caseType === \"\" || formData.caseType === null) {\r\n            setFormErrors((prevState) => ({\r\n                ...prevState,\r\n                caseTypeError: true,\r\n                caseTypeMessage: emptyErrorMessage,\r\n            }));\r\n            valid = false;\r\n        }\r\n        else {\r\n            setFormErrors((prevState) => ({\r\n                ...prevState,\r\n                caseTypeError: false,\r\n                caseTypeMessage: ``,\r\n            }));\r\n            valid = true\r\n        }\r\n        if (\r\n            formErrors.accommodationError ||\r\n            formErrors.allergiesError ||\r\n            formErrors.bloodPressureError ||\r\n            formErrors.caseTypeError ||\r\n            formErrors.heartRateError ||\r\n            formErrors.patientAddressError ||\r\n            formErrors.patientNameError ||\r\n            formErrors.phoneNumberError ||\r\n            formErrors.physicianNameError ||\r\n            formErrors.physicianPhoneError ||\r\n            formErrors.physicianTypeError ||\r\n            formErrors.temperatureError ||\r\n            formErrors.hospitalVisitedError ||\r\n            formErrors.patientAddress\r\n        ) {\r\n            valid = false;\r\n        }\r\n        return valid;\r\n    };\r\n\r\n    const handlePatientAction = (e) => {\r\n        e.preventDefault();\r\n        if (formValid(formData, formErrors)) {\r\n            setSaveButtonClicked({ onSaveButtonClicked: true })\r\n            dispatch({ type: ActionTypes.SAVE_QUESTION_DETAILS_PROGRESS, payload: formData })\r\n            dispatch({ type: ActionTypes.SET_CREATE_QUESTION_FALSE, payload: false })\r\n        }\r\n    };\r\n    const handleDeletePatient = (e) => {\r\n        e.preventDefault();\r\n        setCancelButtonClicked(true);\r\n        dispatch({ type: ActionTypes.DELETE_QUESTION_DETAILS_PROGRESS, payload: formData.questionId })\r\n    };\r\n    const handleCancel = (e) => {\r\n        e.preventDefault();\r\n        setSaveButtonClicked({ onSaveButtonClicked: true })\r\n    }\r\n\r\n    const handleEditPatient = (e) => {\r\n        e.preventDefault();\r\n        if (formValid(formData, formErrors)) {\r\n            dispatch({ type: ActionTypes.UPDATE_QUESTION_DETAILS_PROGRESS, payload: formData })\r\n            setDisableEdit(true);\r\n        }\r\n\r\n    };\r\n    if (onSaveButtonClicked) {\r\n        return (\r\n            <React.Fragment>\r\n                <DisplayQuestion />\r\n            </React.Fragment>\r\n        );\r\n    } else {\r\n        return (\r\n            <Container component=\"main\">\r\n                <CssBaseline />\r\n                <div className={classes.header}>\r\n                    <Typography variant=\"h6\" className={classes.title}>\r\n                        Add Question Details\r\n          </Typography>\r\n                    <Box display={props.display ? \"none\" : \"inline\"}>\r\n                        <Button\r\n                            variant=\"outlined\"\r\n                            onClick={handlePatientAction}\r\n                            className={classes.button}\r\n                        >\r\n                            Save\r\n            </Button>\r\n\r\n                    </Box>\r\n                    <Box display={props.display ? \"none\" : \"inline\"}>\r\n                        <Button\r\n                            variant=\"outlined\"\r\n                            onClick={handleCancel}\r\n                            className={classes.button}\r\n                        >\r\n                            Cancel\r\n            </Button>\r\n\r\n                    </Box>\r\n                    <Box display={props.display ? props.display : \"none\"}>\r\n                        <Button\r\n                            variant=\"outlined\"\r\n                            onClick={handleEditPatient}\r\n                            className={classes.button}\r\n                            disabled={disableEdit}\r\n                        >\r\n                            Save\r\n            </Button>\r\n                        <Button\r\n                            variant=\"outlined\"\r\n                            onClick={handleDeletePatient}\r\n                            className={classes.button}\r\n                        >\r\n                            Delete\r\n            </Button>\r\n                    </Box>\r\n                </div>\r\n                <form className={classes.form} noValidate>\r\n                    <Grid container spacing={2} className={classes.grid}>\r\n                        <Grid item xs={12}>\r\n                            <TextField  // Question Description\r\n                                autoComplete=\"patientname\"\r\n                                name=\"patientname\"\r\n                                variant=\"outlined\"\r\n                                required\r\n                                fullWidth\r\n                                multiline\r\n                                id=\"patientname\"\r\n                                label=\"Question Description\"\r\n                                error={formErrors.patientNameError}\r\n                                helperText={formErrors.patientNameMessage}\r\n                                onChange={handleOnChange}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Grid container spacing={2} className={classes.grid}>\r\n                        <Grid item>\r\n                            <FormControl variant=\"outlined\" className={classes.gender}>   \r\n                                <InputLabel htmlFor=\"type-native-simple\">Difficulty</InputLabel>\r\n                                <Select             // difficulty\r\n                                    native\r\n                                    label=\"Difficulty\"\r\n                                    name=\"gender\"\r\n                                    id=\"gender\"\r\n                                    onChange={handleOnChange}\r\n                                    inputProps={{\r\n                                        name: \"gender\",\r\n                                        id: \"type-native-simple\",\r\n                                    }}\r\n                                >\r\n                                    {difficultyList.map((list) => (\r\n                                        <option value={list}>{list}</option>\r\n                                    ))}\r\n                                </Select>\r\n                            </FormControl>\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <TextField                          // question score\r\n                                autoComplete=\"questionScore\"\r\n                                name=\"phonenumber\"\r\n                                variant=\"outlined\"\r\n                                required\r\n                                fullWidth\r\n                                type=\"number\"\r\n                                id=\"phonenumber\"\r\n                                label=\"Question Score\"\r\n                                error={formErrors.phoneNumberError}\r\n                                helperText={formErrors.phoneNumberMessage}\r\n                                onChange={handleOnChange}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Grid container spacing={2} className={classes.grid}>\r\n                        <Grid item>\r\n                            <Typography>Enter the Choice Details</Typography>\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Grid container spacing={2} className={classes.grid}>\r\n                        <Grid item>\r\n                            <TextField\r\n                                label=\"Choice 1 Description\"\r\n                                variant=\"outlined\"\r\n                                multiline\r\n                                error={formErrors.phoneNumberError}\r\n                                helperText={formErrors.phoneNumberMessage}\r\n                                onChange={handleOnChange}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <FormControl variant=\"outlined\" className={classes.gender}>\r\n                                <InputLabel htmlFor=\"type-native-simple\">is Correct</InputLabel>\r\n                                <Select\r\n                                    native\r\n                                    label=\"Option is Correct\"\r\n                                    name=\"gender\"\r\n                                    id=\"gender\"\r\n                                    onChange={handleOnChange}\r\n                                    inputProps={{\r\n                                        name: \"gender\",\r\n                                        id: \"type-native-simple\",\r\n                                    }}\r\n                                >\r\n                                    {isCorrectList.map((list) => (\r\n                                        <option value={list}>{list}</option>\r\n                                    ))}\r\n                                </Select>\r\n                            </FormControl>\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Grid container spacing={2} className={classes.grid}>\r\n                        <Grid item>\r\n                            <TextField\r\n                                label=\"Choice 2 Description\"\r\n                                variant=\"outlined\"\r\n                                multiline\r\n                                error={formErrors.phoneNumberError}\r\n                                helperText={formErrors.phoneNumberMessage}\r\n                                onChange={handleOnChange}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <FormControl variant=\"outlined\" className={classes.gender}>\r\n                                <InputLabel htmlFor=\"type-native-simple\">is Correct</InputLabel>\r\n                                <Select\r\n                                    native\r\n                                    label=\"Option is Correct\"\r\n                                    name=\"gender\"\r\n                                    id=\"gender\"\r\n                                    onChange={handleOnChange}\r\n                                    inputProps={{\r\n                                        name: \"gender\",\r\n                                        id: \"type-native-simple\",\r\n                                    }}\r\n                                >\r\n                                    {isCorrectList.map((list) => (\r\n                                        <option value={list}>{list}</option>\r\n                                    ))}\r\n                                </Select>\r\n                            </FormControl>\r\n                        </Grid>\r\n                        <Grid container spacing={2} className={classes.grid}>\r\n                            <Grid item>\r\n                                <TextField\r\n                                    label=\"Choice 3 Description\"\r\n                                    variant=\"outlined\"\r\n                                    multiline\r\n                                    error={formErrors.phoneNumberError}\r\n                                    helperText={formErrors.phoneNumberMessage}\r\n                                    onChange={handleOnChange}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <FormControl variant=\"outlined\" className={classes.gender}>\r\n                                    <InputLabel htmlFor=\"type-native-simple\">is Correct</InputLabel>\r\n                                    <Select\r\n                                        native\r\n                                        label=\"Option is Correct\"\r\n                                        name=\"gender\"\r\n                                        id=\"gender\"\r\n                                        onChange={handleOnChange}\r\n                                        inputProps={{\r\n                                            name: \"gender\",\r\n                                            id: \"type-native-simple\",\r\n                                        }}\r\n                                    >\r\n                                        {isCorrectList.map((list) => (\r\n                                            <option value={list}>{list}</option>\r\n                                        ))}\r\n                                    </Select>\r\n                                </FormControl>\r\n                            </Grid>\r\n                            <Grid container spacing={2} className={classes.grid}>\r\n                                <Grid item>\r\n                                    <TextField\r\n                                        label=\"Choice 4 Description\"\r\n                                        variant=\"outlined\"\r\n                                        multiline\r\n                                        error={formErrors.phoneNumberError}\r\n                                        helperText={formErrors.phoneNumberMessage}\r\n                                        onChange={handleOnChange}\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item s={12}>\r\n                                    <FormControl variant=\"outlined\" className={classes.gender}>\r\n                                        <InputLabel htmlFor=\"type-native-simple\">is Correct</InputLabel>\r\n                                        <Select\r\n                                            native\r\n                                            label=\"Option is Correct\"\r\n                                            name=\"gender\"\r\n                                            id=\"gender\"\r\n                                            onChange={handleOnChange}\r\n                                            inputProps={{\r\n                                                name: \"gender\",\r\n                                                id: \"type-native-simple\",\r\n                                            }}\r\n                                        >\r\n                                            {isCorrectList.map((list) => (\r\n                                                <option value={list}>{list}</option>\r\n                                            ))}\r\n                                        </Select>\r\n                                    </FormControl>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </form>\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n","D:\\trial-react\\src\\components\\displayQuestionComponent.jsx",["142"],"import React from \"react\";\r\nimport { useState, useEffect } from \"react\";\r\nimport * as ActionTypes from '../redux/actions/ActionTypes'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\r\nimport { PropTypes } from \"prop-types\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableFooter from \"@material-ui/core/TableFooter\";\r\nimport TablePagination from \"@material-ui/core/TablePagination\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport FirstPageIcon from \"@material-ui/icons/FirstPage\";\r\nimport KeyboardArrowLeft from \"@material-ui/icons/KeyboardArrowLeft\";\r\nimport KeyboardArrowRight from \"@material-ui/icons/KeyboardArrowRight\";\r\nimport LastPageIcon from \"@material-ui/icons/LastPage\";\r\nimport KeyboardArrowDownIcon from \"@material-ui/icons/KeyboardArrowDown\";\r\nimport KeyboardArrowUpIcon from \"@material-ui/icons/KeyboardArrowUp\";\r\nimport Collapse from \"@material-ui/core/Collapse\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport CreateQuestion from './createQuestionComponent';\r\nconst useStyles1 = makeStyles((theme) => ({\r\n  root: {\r\n    flexShrink: 0,\r\n    marginLeft: theme.spacing(2.5),\r\n  },\r\n}));\r\n\r\nfunction TablePaginationActions(props) {\r\n  const classes = useStyles1();\r\n  const theme = useTheme();\r\n  const { count, page, rowsPerPage, onChangePage } = props;\r\n\r\n  const handleFirstPageButtonClick = (event) => {\r\n    onChangePage(event, 0);\r\n  };\r\n\r\n  const handleBackButtonClick = (event) => {\r\n    onChangePage(event, page - 1);\r\n  };\r\n\r\n  const handleNextButtonClick = (event) => {\r\n    onChangePage(event, page + 1);\r\n  };\r\n\r\n  const handleLastPageButtonClick = (event) => {\r\n    onChangePage(event, Math.max(0, Math.ceil(count / rowsPerPage) - 1));\r\n  };\r\n  return (\r\n    <div className={classes.root}>\r\n      <IconButton\r\n        onClick={handleFirstPageButtonClick}\r\n        disabled={page === 0}\r\n        aria-label=\"first page\"\r\n      >\r\n        {theme.direction === \"rtl\" ? <LastPageIcon /> : <FirstPageIcon />}\r\n      </IconButton>\r\n      <IconButton\r\n        onClick={handleBackButtonClick}\r\n        disabled={page === 0}\r\n        aria-label=\"previous page\"\r\n      >\r\n        {theme.direction === \"rtl\" ? (\r\n          <KeyboardArrowRight />\r\n        ) : (\r\n          <KeyboardArrowLeft />\r\n        )}\r\n      </IconButton>\r\n      <IconButton\r\n        onClick={handleNextButtonClick}\r\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\r\n        aria-label=\"next page\"\r\n      >\r\n        {theme.direction === \"rtl\" ? (\r\n          <KeyboardArrowLeft />\r\n        ) : (\r\n          <KeyboardArrowRight />\r\n        )}\r\n      </IconButton>\r\n      <IconButton\r\n        onClick={handleLastPageButtonClick}\r\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\r\n        aria-label=\"last page\"\r\n      >\r\n        {theme.direction === \"rtl\" ? <FirstPageIcon /> : <LastPageIcon />}\r\n      </IconButton>\r\n    </div>\r\n  );\r\n}\r\n\r\nTablePaginationActions.propTypes = {\r\n  count: PropTypes.number.isRequired,\r\n  onChangePage: PropTypes.func.isRequired,\r\n  page: PropTypes.number.isRequired,\r\n  rowsPerPage: PropTypes.number.isRequired,\r\n};\r\n\r\nvar rows = [];\r\n\r\nconst useStyles2 = makeStyles({\r\n  table: {\r\n    minWidth: 500,\r\n  },\r\n  tableHeader:{\r\n    weight : '600'\r\n  },\r\n  row:{\r\n    width: 160 ,\r\n    align: \"left\"\r\n    }\r\n});\r\nconst useRowStyles = makeStyles({\r\n  root: {\r\n    \"& > *\": {\r\n      borderBottom: \"unset\",\r\n    },\r\n  },\r\n  row:{\r\n  width: 160 ,\r\n  align: \"left\"\r\n  }\r\n});\r\n\r\nfunction Row(props) {\r\n  const { row } = props;\r\n  const [open, setOpen] = useState(false);\r\n  const classes = useRowStyles();\r\n  return (\r\n    <React.Fragment>\r\n      <TableRow className={classes.root}>\r\n        <TableCell>\r\n          <IconButton\r\n            aria-label=\"expand row\"\r\n            size=\"small\"\r\n            onClick={() => setOpen(!open)}\r\n          >\r\n            {open ? <KeyboardArrowUpIcon /> : <KeyboardArrowDownIcon />}\r\n          </IconButton>\r\n        </TableCell>\r\n        <TableCell component=\"th\" scope=\"row\" className= {classes.row}>\r\n                {row.questionDescription}\r\n              </TableCell>\r\n              <TableCell className = {classes.row}>\r\n                {row.difficulty}\r\n              </TableCell>\r\n              <TableCell className = {classes.row}>\r\n                {row.questionScore}\r\n              </TableCell>\r\n      </TableRow>\r\n      <TableRow>\r\n        <TableCell style={{ paddingBottom: 0, paddingTop: 0 }} colSpan={6}>\r\n          <Collapse in={open} timeout=\"auto\" unmountOnExit>\r\n            <Box margin={1}>\r\n            <Typography variant=\"h6\" gutterBottom component=\"div\">\r\n                Details\r\n              </Typography>\r\n              <CreateQuestion display ='inline' questionDetails = {row} disabled = {false} />\r\n            </Box>\r\n          </Collapse>\r\n        </TableCell>\r\n      </TableRow>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default function DisplayQuestion() {\r\n  const classes = useStyles2();\r\n  const [pages, setPages] = useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = useState(8);\r\n  const dispatch=useDispatch()\r\n  const selector  = useSelector((state)=>state.fetchQuestionDetailsReducer.data);\r\n  useEffect(()=>{\r\n    dispatch({type:ActionTypes.FETCH_QUESTION_DETAILS_PROGRESS})\r\n  },[])\r\n  rows = selector;\r\n  if(rows===null)\r\n  return (<React.Fragment>No Data to display</React.Fragment>);\r\n  const emptyRows =\r\n    rowsPerPage - Math.min(rowsPerPage, rows===null?100:(rows.length - pages * rowsPerPage));\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPages(newPage);\r\n  };\r\n \r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPages(0);\r\n  };\r\n  return (\r\n    <TableContainer component={Paper}>\r\n      <Table className={classes.table} aria-label=\"custom pagination table\">\r\n        <TableHead>\r\n          <TableRow>\r\n            <TableCell className = {classes.row}/>\r\n            <TableCell className = {classes.row}>Question Description</TableCell>\r\n            <TableCell className = {classes.row}>Difficulty</TableCell>\r\n            <TableCell className = {classes.row}>Score</TableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {(rowsPerPage > 0\r\n            ? rows.slice(pages * rowsPerPage, pages * rowsPerPage + rowsPerPage)\r\n            : rows\r\n          ).map((row) => (\r\n            <Row key={row.id} row={row}/>\r\n          ))}\r\n\r\n          {emptyRows > 0 && (\r\n            <TableRow style={{ height: 53 * emptyRows }}>\r\n              <TableCell colSpan={6} />\r\n            </TableRow>\r\n          )}\r\n        </TableBody>\r\n        <TableFooter>\r\n          <TableRow>\r\n            <TablePagination\r\n              rowsPerPageOptions={[8, 15, 25, { label: \"All\", value: -1 }]}\r\n              colSpan={5}\r\n              count={rows.length}\r\n              rowsPerPage={rowsPerPage}\r\n              page={pages}\r\n              SelectProps={{\r\n                inputProps: { \"aria-label\": \"rows per page\" },\r\n                native: true,\r\n              }}\r\n              onChangePage={handleChangePage}\r\n              onChangeRowsPerPage={handleChangeRowsPerPage}\r\n              ActionsComponent={TablePaginationActions}\r\n            />\r\n          </TableRow>\r\n        </TableFooter>\r\n      </Table>\r\n    </TableContainer>\r\n  );\r\n}",{"ruleId":"143","replacedBy":"144"},{"ruleId":"145","replacedBy":"146"},{"ruleId":"147","severity":1,"message":"148","line":5,"column":18,"nodeType":"149","messageId":"150","endLine":5,"endColumn":25},{"ruleId":"147","severity":1,"message":"151","line":46,"column":11,"nodeType":"149","messageId":"150","endLine":46,"endColumn":28},{"ruleId":"152","severity":1,"message":"153","line":179,"column":5,"nodeType":"154","endLine":179,"endColumn":7,"suggestions":"155"},"no-native-reassign",["156"],"no-negated-in-lhs",["157"],"no-unused-vars","'SvgIcon' is defined but never used.","Identifier","unusedVar","'phoneNumberRegexp' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["158"],"no-global-assign","no-unsafe-negation",{"desc":"159","fix":"160"},"Update the dependencies array to be: [dispatch]",{"range":"161","text":"162"},[5678,5680],"[dispatch]"]