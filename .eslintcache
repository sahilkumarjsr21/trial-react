[{"/Users/sk078475/WebstormProjects/quiz-app/src/components/loginComponent.jsx":"1","/Users/sk078475/WebstormProjects/quiz-app/src/App.js":"2","/Users/sk078475/WebstormProjects/quiz-app/src/index.js":"3","/Users/sk078475/WebstormProjects/quiz-app/src/components/dashboardComponent.jsx":"4","/Users/sk078475/WebstormProjects/quiz-app/src/redux/actions/ActionTypes.js":"5","/Users/sk078475/WebstormProjects/quiz-app/src/components/createQuestionComponent.jsx":"6","/Users/sk078475/WebstormProjects/quiz-app/src/components/displayQuestionComponent.jsx":"7","/Users/sk078475/WebstormProjects/quiz-app/src/redux/store/configureStore.js":"8","/Users/sk078475/WebstormProjects/quiz-app/src/redux/reducer/rootReducers.js":"9","/Users/sk078475/WebstormProjects/quiz-app/src/redux/reducer/createQuestionReducer.js":"10","/Users/sk078475/WebstormProjects/quiz-app/src/api/signupapi.js":"11","/Users/sk078475/WebstormProjects/quiz-app/src/redux/actions/UserActionLogin.js":"12","/Users/sk078475/WebstormProjects/quiz-app/src/api/addQuestionDetailsApi.js":"13","/Users/sk078475/WebstormProjects/quiz-app/src/redux/actions/deleteQuestionAction.js":"14","/Users/sk078475/WebstormProjects/quiz-app/src/redux/sagas/storeQuestionSaga.js":"15","/Users/sk078475/WebstormProjects/quiz-app/src/redux/sagas/fetchQuestionDetailsSaga.js":"16","/Users/sk078475/WebstormProjects/quiz-app/src/redux/sagas/updateQuestionDetailSaga.js":"17","/Users/sk078475/WebstormProjects/quiz-app/src/redux/sagas/deleteQuestionDetailsSaga.js":"18","/Users/sk078475/WebstormProjects/quiz-app/src/redux/sagas/signUpSaga.js":"19","/Users/sk078475/WebstormProjects/quiz-app/src/redux/sagas/loginSaga.js":"20","/Users/sk078475/WebstormProjects/quiz-app/src/redux/reducer/deleteQuestionReducer.js":"21"},{"size":7148,"mtime":1608060668306,"results":"22","hashOfConfig":"23"},{"size":197,"mtime":1608062222092,"results":"24","hashOfConfig":"23"},{"size":578,"mtime":1608065409091,"results":"25","hashOfConfig":"23"},{"size":2501,"mtime":1608065202086,"results":"26","hashOfConfig":"23"},{"size":1720,"mtime":1608063756285,"results":"27","hashOfConfig":"23"},{"size":23563,"mtime":1608072575079,"results":"28","hashOfConfig":"23"},{"size":7502,"mtime":1608072714385,"results":"29","hashOfConfig":"23"},{"size":1487,"mtime":1608067389511,"results":"30","hashOfConfig":"23"},{"size":557,"mtime":1608067983241,"results":"31","hashOfConfig":"23"},{"size":457,"mtime":1608065162726,"results":"32","hashOfConfig":"23"},{"size":384,"mtime":1608067143241,"results":"33","hashOfConfig":"23"},{"size":464,"mtime":1608061908613,"results":"34","hashOfConfig":"23"},{"size":342,"mtime":1608067221336,"results":"35","hashOfConfig":"23"},{"size":494,"mtime":1608066575106,"results":"36","hashOfConfig":"23"},{"size":727,"mtime":1608067477299,"results":"37","hashOfConfig":"23"},{"size":645,"mtime":1608067466327,"results":"38","hashOfConfig":"23"},{"size":753,"mtime":1608067486631,"results":"39","hashOfConfig":"23"},{"size":769,"mtime":1608067696182,"results":"40","hashOfConfig":"23"},{"size":775,"mtime":1608067599953,"results":"41","hashOfConfig":"23"},{"size":779,"mtime":1608067612158,"results":"42","hashOfConfig":"23"},{"size":573,"mtime":1608066284301,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46"},"10jaqpm",{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/sk078475/WebstormProjects/quiz-app/src/components/loginComponent.jsx",["89","90","91","92","93"],"import React, { useState } from \"react\";\nimport {useDispatch, useSelector} from 'react-redux';\nimport * as ActionTypes from '../redux/actions/ActionTypes'\nimport {\n    makeStyles,\n    CssBaseline,\n    Container,\n    Typography,\n    TextField,\n    Button,\n    InputAdornment,\n    Avatar,\n} from \"@material-ui/core\";\nimport { RemoveRedEye, EnhancedEncryptionRounded } from \"@material-ui/icons\";\nimport SnackbarComponent from \"./SnackBar\";\nconst useStyles = makeStyles((theme) => ({\n    paperRoot: {\n        marginTop: theme.spacing(1),\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\",\n    },\n    icon: {\n        margin: theme.spacing(1),\n        backgroundColor: \"#1de9b6\",\n    },\n    form: {\n        width: \"100%\",\n        marginTop: theme.spacing(1),\n    },\n    submitBtn: {\n        margin: theme.spacing(2, 0, 2),\n        backgroundColor: \"#0277bd\",\n    },\n    eye: {\n        cursor: \"pointer\",\n    },\n}));\n\nexport default function LoginComponent() {\n    const classes = useStyles();\n    const dispatch = useDispatch();\n    const emailRegex = RegExp(\n        /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n    );\n    const passwordRegex = RegExp(\n        \"^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[*.!@$%^&(){}[]:;<>,.?/~_+-=|]).{8,32}$\"\n    );\n\n    const [passwordType, setPasswordType] = useState(\"password\");\n    const [formErrors, setFormErrors] = useState({\n        emailError: false,\n        passwordError: false,\n        emailErrorMessage: \"\",\n        passwordErrorMessage: \"\",\n    });\n    const [formData, setFormData] = useState({ email: \"\", password: \"\" });\n\n\n    const togglePasswordMask = () => {\n        setPasswordType((prevstate) =>\n            prevstate === \"text\" ? \"password\" : \"text\"\n        );\n    };\n\n    const formValid = (formData, formErrors) => {\n        var valid = true;\n        if (formData.email === \"\" ) {\n            setEmailErrorType(`Can't be Empty`)\n            valid=false\n        }\n        if(formData.password === \"\"){\n            setPasswordErrorType(`Can't Be Empty`)\n            valid =false\n        }\n        else if (\n            formErrors.emailError !== false ||\n            formErrors.passwordError !== false\n        ) {\n            valid=false\n        }\n        return valid;\n    };\n\n    const handleOnSubmit = (e) => {\n        e.preventDefault();\n        if (formValid(formData, formErrors)) {\n            dispatch({type: ActionTypes.LOGIN_USER_PROGRESS , payload: formData });\n        }\n    };\n\n    const setEmailErrorType = (message) => {\n        setFormErrors((prevstate)=>({\n            ...prevstate,\n            emailError: true,\n            emailErrorMessage: message,\n        }));\n    };\n\n    const setPasswordErrorType = (message) => {\n        setFormErrors((prevstate)=>({\n            ...prevstate,\n            passwordError: true,\n            passwordErrorMessage: message,\n        }));\n    };\n    const handleOnChange = (e) => {\n        e.preventDefault();\n        const { name, value } = e.target;\n\n        switch (name) {\n            case \"email\":\n                setFormData({ ...formData, email: value });\n                if (value === \"\") {\n                    setEmailErrorType(\"Email is Empty\");\n                } else if (!emailRegex.test(value) === true) {\n                    setEmailErrorType(\"Invalid Email\");\n                } else {\n                    setFormErrors({\n                        ...formErrors,\n                        emailError: false,\n                        emailErrorMessage: \"\",\n                    });\n                }\n                break;\n            case \"password\":\n                setFormData({ ...formData, password: value });\n                if (value === \"\") {\n                    setPasswordErrorType(\"Password is Empty\");\n                } else {\n                    setFormErrors({\n                        ...formErrors,\n                        passwordError: false,\n                        passwordErrorMessage: \"\",\n                    });\n                }\n                break;\n            default:\n                break;\n        }\n    };\n    const selector = useSelector((state)=>state.loginReducer.token)\n    return (\n        <React.Fragment>\n            <Container component=\"main\" maxWidth=\"xs\">\n                <CssBaseline />\n                <div className={classes.paperRoot}>\n                    <Avatar className={classes.icon}>\n                        <EnhancedEncryptionRounded />\n                    </Avatar>\n                    <Typography variant=\"h5\"> Sign In</Typography>\n                    <form className={classes.form} noValidate onSubmit={handleOnSubmit}>\n                        <TextField\n                            variant=\"outlined\"\n                            fullWidth\n                            margin=\"normal\"\n                            required={true}\n                            name=\"email\"\n                            label=\"Email Address\"\n                            type=\"email\"\n                            id=\"email\"\n                            error={formErrors.emailError}\n                            onChange={handleOnChange}\n                            helperText={formErrors.emailErrorMessage}\n                        />\n                        <TextField\n                            variant=\"outlined\"\n                            fullWidth\n                            margin=\"normal\"\n                            error={formErrors.passwordError}\n                            required={true}\n                            helperText={formErrors.passwordErrorMessage}\n                            name=\"password\"\n                            label=\"Password\"\n                            type={passwordType}\n                            id=\"password\"\n                            onChange={handleOnChange}\n                            autoComplete=\"current-password\"\n                            InputProps={{\n                                endAdornment: (\n                                    <InputAdornment position=\"end\">\n                                        <RemoveRedEye\n                                            className={classes.eye}\n                                            onClick={togglePasswordMask}\n                                        />\n                                    </InputAdornment>\n                                ),\n                            }}\n                        />\n                        <Button\n                            variant=\"contained\"\n                            color=\"primary\"\n                            className={classes.submitBtn}\n                            fullWidth={true}\n                            size=\"large\"\n                            onClick={handleOnSubmit}\n                        >\n                            sign in\n                        </Button>\n                    </form>\n                </div>\n            </Container>\n            {selector ==='fail'?<SnackbarComponent open ={true} severity = 'error' text = \"Invalid credentials\"/>:null}\n        </React.Fragment>\n    );\n}\n","/Users/sk078475/WebstormProjects/quiz-app/src/App.js",[],"/Users/sk078475/WebstormProjects/quiz-app/src/index.js",["94"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from 'react-redux'\n\nReactDOM.render(\n  <Provider store={store}>\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","/Users/sk078475/WebstormProjects/quiz-app/src/components/dashboardComponent.jsx",["95"],"/Users/sk078475/WebstormProjects/quiz-app/src/redux/actions/ActionTypes.js",[],"/Users/sk078475/WebstormProjects/quiz-app/src/components/createQuestionComponent.jsx",["96"],"import React from \"react\";\nimport * as ActionTypes from '../redux/actions/ActionTypes'\nimport {\n    makeStyles,\n    CssBaseline,\n    Container,\n    Typography,\n    TextField,\n    Select,\n    InputLabel,\n    Grid,\n    FormControl,\n    Button,\n    Box,\n} from \"@material-ui/core\";\nimport { useState } from \"react\";\nimport { useDispatch } from 'react-redux'\nimport DisplayQuestion from \"./displayQuestionComponent\";\nconst useStyles = makeStyles((theme) => ({\n    form: {\n        width: \"100%\",\n        marginTop: theme.spacing(2),\n    },\n    gender: {\n        width: \"100%\",\n    },\n    grid: {\n        marginBottom: theme.spacing(1),\n    },\n    header: {\n        display: \"flex\",\n        marginTop: theme.spacing(10)\n    },\n    title: {\n        flexGrow: 1,\n    },\n    button: {\n        marginRight: theme.spacing(2),\n    },\n}));\n\nexport default function CreateQuestion(props) {\n    const classes = useStyles();\n    const dispatch = useDispatch();\n    const emptyErrorMessage = `Can't be empty`;\n    const phoneNumberRegexp = RegExp(\n        /^\\s*(?:\\+?(\\d{1,3}))?[-. (]*(\\d{3})[-. )]*(\\d{3})[-. ]*(\\d{4})(?: *x(\\d+))?\\s*$/\n    )\n    \n    const [onSaveButtonClicked, setSaveButtonClicked] = useState(false);\n    const [cancelButtonClicked, setCancelButtonClicked] = useState(false);\n    var questionFormData = {\n        questionDescription: \"\",\n        difficulty: \"\",\n        questionScore: \"\",\n        choices: [],\n    };\n    if (props.questionDetails !== null) {\n        questionFormData = props.questionDetails;\n    }\n\n    const [formData, setFormData] = useState(\n        props.questionDetails !== null ? props.questionDetails : questionFormData\n    );\n    const [formErrors, setFormErrors] = useState({\n        questionDescriptionError: false,\n        questionDifficultyError: false,\n        questionScoreError: false,\n        questionOptionsError: false,\n        questionDescriptionMessage: \"\",\n        questionDifficultyMessage: \"\",\n        questionScoreMessage: \"\",\n        \n    });\n    const difficultyList = [\"\", `HARD`, `EASY`, `MEDIUM`];\n    const isCorrectList = [\"\", \"true\", \"false\"]\n    \n    const [disableEdit, setDisableEdit] = useState(true);\n    React.useEffect(() => {\n        return () => {\n            setCancelButtonClicked(false)\n        }\n    }, [cancelButtonClicked])\n   \n\n    const setPatientNameErrorType = (message) => {\n        setFormErrors((prevState) => ({\n            ...prevState,\n            patientNameError: true,\n            patientNameMessage: message,\n        }));\n    };\n    const setPatientPhoneErrorType = (message) => {\n        setFormErrors((prevState) => ({\n            ...prevState,\n            phoneNumberError: true,\n            phoneNumberMessage: message,\n        }));\n    };\n    const setPatientGenderErrorType = (message) => {\n        setFormErrors((prevState) => ({\n            ...prevState,\n            phoneNumberError: true,\n            phoneNumberMessage: message,\n        }));\n    };\n    \n    \n    const handleOnChange = (e) => {\n        e.preventDefault();\n        setDisableEdit(false);\n        const { name, value } = e.target;\n        switch (name) {\n            case \"patientname\":\n                setFormData({ ...formData, patientName: value });\n                if (value === \"\") {\n                    setPatientNameErrorType(emptyErrorMessage);\n                } else if (value.length < 3) {\n                    setPatientNameErrorType(\"Must be atleast of length 3\");\n                } else {\n                    setFormErrors({\n                        ...formErrors,\n                        patientNameError: false,\n                        patientNameMessage: \"\",\n                    });\n                }\n                break;\n            case \"gender\":\n                setFormData({ ...formData, gender: value });\n                if (value === \"\") {\n                    setPatientGenderErrorType(\"Must be one of the option\");\n                }\n                break;\n            case \"phonenumber\":\n                setFormData({ ...formData, phoneNumber: value });\n                if (value === \"\") {\n                    setPatientPhoneErrorType(emptyErrorMessage);\n                } else {\n                    setFormErrors({\n                        ...formErrors,\n                        phoneNumberError: false,\n                        phoneNumberMessage: \"\",\n                    });\n                }\n                break;\n            case \"patientaddress\":\n                setFormData({ ...formData, patientAddress: value });\n                if (value === \"\") {\n                    setFormErrors({\n                        ...formErrors,\n                        patientAddressError: true,\n                        patientAddressMessage: emptyErrorMessage,\n                    });\n                } else {\n                    setFormErrors({\n                        ...formErrors,\n                        patientAddressError: false,\n                        patientAddressMessage: \"\",\n                    });\n                }\n                break;\n            case \"choice1description\":\n                setFormData({...formData, })\n                break;\n            \n            default:\n                break;\n        }\n    };\n\n    const formValid = (formData, formErrors) => {\n        let valid = true;\n        if (formData.patientName === \"\") {\n            setPatientNameErrorType(emptyErrorMessage);\n            valid = false;\n        }\n        if (formData.phoneNumber === \"\") {\n            setPatientPhoneErrorType(emptyErrorMessage);\n            valid = false;\n        }\n        if (formData.heartRate === \"\") {\n            setFormErrors((prevState) => ({\n                ...prevState,\n                heartRateError: true,\n                heartRateMessage: emptyErrorMessage,\n            }));\n            valid = false;\n        }\n        if (formData.patientAddress === \"\") {\n            setFormErrors((prevState) => ({\n                ...prevState,\n                patientAddressError: true,\n                patientAddressMessage: emptyErrorMessage,\n            }));\n            valid = false;\n        }\n        if (formData.accommodation === \"\" || formData.accommodation === null) {\n            setFormErrors((prevState) => ({\n                ...prevState,\n                accommodationError: true,\n                accommodationMessage: emptyErrorMessage,\n            }));\n            valid = false;\n        }\n        else {\n            setFormErrors((prevState) => ({\n                ...prevState,\n                accommodationError: false,\n                accommodationMessage: '',\n            }));\n            valid = true\n        }\n        if (formData.allergies === \"\") {\n            setFormErrors((prevState) => ({\n                ...prevState,\n                allergiesError: true,\n                allergiesMessage: emptyErrorMessage,\n            }));\n            valid = false;\n        }\n        if (formData.temperature === \"\") {\n            setFormErrors((prevState) => ({\n                ...prevState,\n                temperatureError: true,\n                temperatureMessage: emptyErrorMessage,\n            }));\n            valid = false;\n        }\n        if (formData.heartRate === \"\") {\n            setFormErrors((prevState) => ({\n                ...prevState,\n                heartRateError: true,\n                heartRateMessage: emptyErrorMessage,\n            }));\n            valid = false;\n        }\n        if (formData.bloodPressure === \"\") {\n            setFormErrors((prevState) => ({\n                ...prevState,\n                bloodPressureError: true,\n                bloodPressureMessage: emptyErrorMessage,\n            }));\n        }\n        if (formData.physicianName === \"\") {\n            setFormErrors((prevState) => ({\n                ...prevState,\n                physicianNameError: true,\n                physicianNameMessage: emptyErrorMessage,\n            }));\n        }\n        if (formData.physicianType === \"\" || formData.physicianType === null) {\n            setFormErrors((prevState) => ({\n                ...prevState,\n                physicianTypeError: true,\n                physicianTypeMessage: emptyErrorMessage,\n            }));\n            valid = false;\n        }\n        else {\n            setFormErrors((prevState) => ({\n                ...prevState,\n                physicianTypeError: false,\n                physicianTypeMessage: ``,\n            }));\n            valid = true\n        }\n        if (formData.physicianPhone === \"\") {\n            setFormErrors((prevState) => ({\n                ...prevState,\n                physicianPhoneError: true,\n                physicianPhoneMessage: emptyErrorMessage,\n            }));\n        }\n        if (formData.hospitalVisited === \"\" || formData.hospitalVisited === null) {\n            setFormErrors((prevState) => ({\n                ...prevState,\n                hospitalVisitedError: true,\n                hospitalVisitedMessage: emptyErrorMessage,\n            }));\n            valid = false;\n        }\n        else {\n            setFormErrors((prevState) => ({\n                ...prevState,\n                hospitalVisitedError: false,\n                hospitalVisitedMessage: '',\n            }));\n        }\n        if (formData.caseType === \"\" || formData.caseType === null) {\n            setFormErrors((prevState) => ({\n                ...prevState,\n                caseTypeError: true,\n                caseTypeMessage: emptyErrorMessage,\n            }));\n            valid = false;\n        }\n        else {\n            setFormErrors((prevState) => ({\n                ...prevState,\n                caseTypeError: false,\n                caseTypeMessage: ``,\n            }));\n            valid = true\n        }\n        if (\n            formErrors.accommodationError ||\n            formErrors.allergiesError ||\n            formErrors.bloodPressureError ||\n            formErrors.caseTypeError ||\n            formErrors.heartRateError ||\n            formErrors.patientAddressError ||\n            formErrors.patientNameError ||\n            formErrors.phoneNumberError ||\n            formErrors.physicianNameError ||\n            formErrors.physicianPhoneError ||\n            formErrors.physicianTypeError ||\n            formErrors.temperatureError ||\n            formErrors.hospitalVisitedError ||\n            formErrors.patientAddress\n        ) {\n            valid = false;\n        }\n        return valid;\n    };\n\n    const handlePatientAction = (e) => {\n        e.preventDefault();\n        if (formValid(formData, formErrors)) {\n            setSaveButtonClicked({ onSaveButtonClicked: true })\n            dispatch({ type: ActionTypes.SAVE_QUESTION_DETAILS_PROGRESS, payload: formData })\n            dispatch({ type: ActionTypes.SET_CREATE_QUESTION_FALSE, payload: false })\n        }\n    };\n    const handleDeletePatient = (e) => {\n        e.preventDefault();\n        setCancelButtonClicked(true);\n        dispatch({ type: ActionTypes.DELETE_QUESTION_DETAILS_PROGRESS, payload: formData.id })\n    };\n    const handleCancel = (e) => {\n        e.preventDefault();\n        setSaveButtonClicked({ onSaveButtonClicked: true })\n    }\n\n    const handleEditPatient = (e) => {\n        e.preventDefault();\n        if (formValid(formData, formErrors)) {\n            dispatch({ type: ActionTypes.UPDATE_QUESTION_DETAILS_PROGRESS, payload: formData })\n            setDisableEdit(true);\n        }\n\n    };\n    if (onSaveButtonClicked) {\n        return (\n            <React.Fragment>\n                <DisplayQuestion />\n            </React.Fragment>\n        );\n    } else {\n        return (\n            <Container component=\"main\">\n                <CssBaseline />\n                <div className={classes.header}>\n                    <Typography variant=\"h6\" className={classes.title}>\n                        Add Question Details\n          </Typography>\n                    <Box display={props.display ? \"none\" : \"inline\"}>\n                        <Button\n                            variant=\"outlined\"\n                            onClick={handlePatientAction}\n                            className={classes.button}\n                        >\n                            Save\n            </Button>\n\n                    </Box>\n                    <Box display={props.display ? \"none\" : \"inline\"}>\n                        <Button\n                            variant=\"outlined\"\n                            onClick={handleCancel}\n                            className={classes.button}\n                        >\n                            Cancel\n            </Button>\n\n                    </Box>\n                    <Box display={props.display ? props.display : \"none\"}>\n                        <Button\n                            variant=\"outlined\"\n                            onClick={handleEditPatient}\n                            className={classes.button}\n                            disabled={disableEdit}\n                        >\n                            Save\n            </Button>\n                        <Button\n                            variant=\"outlined\"\n                            onClick={handleDeletePatient}\n                            className={classes.button}\n                        >\n                            Delete\n            </Button>\n                    </Box>\n                </div>\n                <form className={classes.form} noValidate>\n                    <Grid container spacing={2} className={classes.grid}>\n                        <Grid item xs={12}>\n                            <TextField  // Question Description\n                                autoComplete=\"patientname\"\n                                name=\"patientname\"\n                                variant=\"outlined\"\n                                required\n                                fullWidth\n                                multiline\n                                id=\"patientname\"\n                                label=\"Question Description\"\n                                error={formErrors.patientNameError}\n                                helperText={formErrors.patientNameMessage}\n                                onChange={handleOnChange}\n                            />\n                        </Grid>\n                    </Grid>\n                    <Grid container spacing={2} className={classes.grid}>\n                        <Grid item>\n                            <FormControl variant=\"outlined\" className={classes.gender}>   \n                                <InputLabel htmlFor=\"type-native-simple\">Difficulty</InputLabel>\n                                <Select             // difficulty\n                                    native\n                                    label=\"Difficulty\"\n                                    name=\"gender\"\n                                    id=\"gender\"\n                                    onChange={handleOnChange}\n                                    inputProps={{\n                                        name: \"gender\",\n                                        id: \"type-native-simple\",\n                                    }}\n                                >\n                                    {difficultyList.map((list) => (\n                                        <option value={list}>{list}</option>\n                                    ))}\n                                </Select>\n                            </FormControl>\n                        </Grid>\n                        <Grid item>\n                            <TextField                          // question score\n                                autoComplete=\"questionScore\"\n                                name=\"phonenumber\"\n                                variant=\"outlined\"\n                                required\n                                fullWidth\n                                type=\"number\"\n                                id=\"phonenumber\"\n                                label=\"Question Score\"\n                                error={formErrors.phoneNumberError}\n                                helperText={formErrors.phoneNumberMessage}\n                                onChange={handleOnChange}\n                            />\n                        </Grid>\n                    </Grid>\n                    <Grid container spacing={2} className={classes.grid}>\n                        <Grid item>\n                            <Typography>Enter the Choice Details</Typography>\n                        </Grid>\n                    </Grid>\n                    <Grid container spacing={2} className={classes.grid}>\n                        <Grid item>\n                            <TextField\n                                label=\"Choice 1 Description\"\n                                variant=\"outlined\"\n                                multiline\n                                error={formErrors.phoneNumberError}\n                                helperText={formErrors.phoneNumberMessage}\n                                onChange={handleOnChange}\n                            />\n                        </Grid>\n                        <Grid item>\n                            <FormControl variant=\"outlined\" className={classes.gender}>\n                                <InputLabel htmlFor=\"type-native-simple\">is Correct</InputLabel>\n                                <Select\n                                    native\n                                    label=\"Option is Correct\"\n                                    name=\"gender\"\n                                    id=\"gender\"\n                                    onChange={handleOnChange}\n                                    inputProps={{\n                                        name: \"gender\",\n                                        id: \"type-native-simple\",\n                                    }}\n                                >\n                                    {isCorrectList.map((list) => (\n                                        <option value={list}>{list}</option>\n                                    ))}\n                                </Select>\n                            </FormControl>\n                        </Grid>\n                    </Grid>\n                    <Grid container spacing={2} className={classes.grid}>\n                        <Grid item>\n                            <TextField\n                                label=\"Choice 2 Description\"\n                                variant=\"outlined\"\n                                multiline\n                                error={formErrors.phoneNumberError}\n                                helperText={formErrors.phoneNumberMessage}\n                                onChange={handleOnChange}\n                            />\n                        </Grid>\n                        <Grid item>\n                            <FormControl variant=\"outlined\" className={classes.gender}>\n                                <InputLabel htmlFor=\"type-native-simple\">is Correct</InputLabel>\n                                <Select\n                                    native\n                                    label=\"Option is Correct\"\n                                    name=\"gender\"\n                                    id=\"gender\"\n                                    onChange={handleOnChange}\n                                    inputProps={{\n                                        name: \"gender\",\n                                        id: \"type-native-simple\",\n                                    }}\n                                >\n                                    {isCorrectList.map((list) => (\n                                        <option value={list}>{list}</option>\n                                    ))}\n                                </Select>\n                            </FormControl>\n                        </Grid>\n                        <Grid container spacing={2} className={classes.grid}>\n                            <Grid item>\n                                <TextField\n                                    label=\"Choice 3 Description\"\n                                    variant=\"outlined\"\n                                    multiline\n                                    error={formErrors.phoneNumberError}\n                                    helperText={formErrors.phoneNumberMessage}\n                                    onChange={handleOnChange}\n                                />\n                            </Grid>\n                            <Grid item>\n                                <FormControl variant=\"outlined\" className={classes.gender}>\n                                    <InputLabel htmlFor=\"type-native-simple\">is Correct</InputLabel>\n                                    <Select\n                                        native\n                                        label=\"Option is Correct\"\n                                        name=\"gender\"\n                                        id=\"gender\"\n                                        onChange={handleOnChange}\n                                        inputProps={{\n                                            name: \"gender\",\n                                            id: \"type-native-simple\",\n                                        }}\n                                    >\n                                        {isCorrectList.map((list) => (\n                                            <option value={list}>{list}</option>\n                                        ))}\n                                    </Select>\n                                </FormControl>\n                            </Grid>\n                            <Grid container spacing={2} className={classes.grid}>\n                                <Grid item>\n                                    <TextField\n                                        label=\"Choice 4 Description\"\n                                        variant=\"outlined\"\n                                        multiline\n                                        error={formErrors.phoneNumberError}\n                                        helperText={formErrors.phoneNumberMessage}\n                                        onChange={handleOnChange}\n                                    />\n                                </Grid>\n                                <Grid item s={12}>\n                                    <FormControl variant=\"outlined\" className={classes.gender}>\n                                        <InputLabel htmlFor=\"type-native-simple\">is Correct</InputLabel>\n                                        <Select\n                                            native\n                                            label=\"Option is Correct\"\n                                            name=\"gender\"\n                                            id=\"gender\"\n                                            onChange={handleOnChange}\n                                            inputProps={{\n                                                name: \"gender\",\n                                                id: \"type-native-simple\",\n                                            }}\n                                        >\n                                            {isCorrectList.map((list) => (\n                                                <option value={list}>{list}</option>\n                                            ))}\n                                        </Select>\n                                    </FormControl>\n                                </Grid>\n                            </Grid>\n                        </Grid>\n                    </Grid>\n                </form>\n            </Container>\n        );\n    }\n}\n","/Users/sk078475/WebstormProjects/quiz-app/src/components/displayQuestionComponent.jsx",["97"],"/Users/sk078475/WebstormProjects/quiz-app/src/redux/store/configureStore.js",[],"/Users/sk078475/WebstormProjects/quiz-app/src/redux/reducer/rootReducers.js",[],"/Users/sk078475/WebstormProjects/quiz-app/src/redux/reducer/createQuestionReducer.js",[],"/Users/sk078475/WebstormProjects/quiz-app/src/api/signupapi.js",[],"/Users/sk078475/WebstormProjects/quiz-app/src/redux/actions/UserActionLogin.js",[],"/Users/sk078475/WebstormProjects/quiz-app/src/api/addQuestionDetailsApi.js",[],"/Users/sk078475/WebstormProjects/quiz-app/src/redux/actions/deleteQuestionAction.js",[],"/Users/sk078475/WebstormProjects/quiz-app/src/redux/sagas/storeQuestionSaga.js",[],"/Users/sk078475/WebstormProjects/quiz-app/src/redux/sagas/fetchQuestionDetailsSaga.js",[],"/Users/sk078475/WebstormProjects/quiz-app/src/redux/sagas/updateQuestionDetailSaga.js",[],"/Users/sk078475/WebstormProjects/quiz-app/src/redux/sagas/deleteQuestionDetailsSaga.js",[],"/Users/sk078475/WebstormProjects/quiz-app/src/redux/sagas/signUpSaga.js",[],"/Users/sk078475/WebstormProjects/quiz-app/src/redux/sagas/loginSaga.js",[],"/Users/sk078475/WebstormProjects/quiz-app/src/redux/reducer/deleteQuestionReducer.js",[],{"ruleId":"98","severity":1,"message":"99","line":44,"column":31,"nodeType":"100","messageId":"101","endLine":44,"endColumn":32,"suggestions":"102"},{"ruleId":"98","severity":1,"message":"99","line":44,"column":56,"nodeType":"100","messageId":"101","endLine":44,"endColumn":57,"suggestions":"103"},{"ruleId":"98","severity":1,"message":"99","line":44,"column":65,"nodeType":"100","messageId":"101","endLine":44,"endColumn":66,"suggestions":"104"},{"ruleId":"98","severity":1,"message":"99","line":44,"column":69,"nodeType":"100","messageId":"101","endLine":44,"endColumn":70,"suggestions":"105"},{"ruleId":"106","severity":1,"message":"107","line":46,"column":11,"nodeType":"108","messageId":"109","endLine":46,"endColumn":24},{"ruleId":"110","severity":2,"message":"111","line":8,"column":20,"nodeType":"108","messageId":"112","endLine":8,"endColumn":25},{"ruleId":"106","severity":1,"message":"113","line":5,"column":18,"nodeType":"108","messageId":"109","endLine":5,"endColumn":25},{"ruleId":"106","severity":1,"message":"114","line":46,"column":11,"nodeType":"108","messageId":"109","endLine":46,"endColumn":28},{"ruleId":"115","severity":1,"message":"116","line":179,"column":5,"nodeType":"117","endLine":179,"endColumn":7,"suggestions":"118"},"no-useless-escape","Unnecessary escape character: \\\".","Literal","unnecessaryEscape",["119","120"],["121","122"],["123","124"],["125","126"],"no-unused-vars","'passwordRegex' is assigned a value but never used.","Identifier","unusedVar","no-undef","'store' is not defined.","undef","'SvgIcon' is defined but never used.","'phoneNumberRegexp' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["127"],{"messageId":"128","fix":"129","desc":"130"},{"messageId":"131","fix":"132","desc":"133"},{"messageId":"128","fix":"134","desc":"130"},{"messageId":"131","fix":"135","desc":"133"},{"messageId":"128","fix":"136","desc":"130"},{"messageId":"131","fix":"137","desc":"133"},{"messageId":"128","fix":"138","desc":"130"},{"messageId":"131","fix":"139","desc":"133"},{"desc":"140","fix":"141"},"removeEscape",{"range":"142","text":"143"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"144","text":"145"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"146","text":"143"},{"range":"147","text":"145"},{"range":"148","text":"143"},{"range":"149","text":"145"},{"range":"150","text":"143"},{"range":"151","text":"145"},"Update the dependencies array to be: [dispatch]",{"range":"152","text":"153"},[1121,1122],"",[1121,1121],"\\",[1146,1147],[1146,1146],[1155,1156],[1155,1155],[1159,1160],[1159,1159],[5500,5502],"[dispatch]"]